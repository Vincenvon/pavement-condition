@page "/roads"
@inject IRoadService roadService
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject IAlertService AlertService

<h1>Roads</h1>

@if (roads == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col float-right">
            <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(onCreateClick) Text="Create" ButtonStyle="ButtonStyle.Secondary" />
        </div>
    </div>
    <RadzenDataGrid @ref="roadGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                    Data="@roads" TItem="RoadModel">
        <Columns>
            <RadzenDataGridColumn Width="50px" TItem="RoadModel" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                <Template Context="data">
                    @(roads.IndexOf(data) + 1)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="RoadModel" Property="Number" Title="Number" />
            <RadzenDataGridColumn TItem="RoadModel" Property="StartPoint" Title="Start point" />
            <RadzenDataGridColumn TItem="RoadModel" Property="EndPoint" Title="End point" />
            <RadzenDataGridColumn TItem="RoadModel" Property="Distance" Title="Distance" />
            <RadzenDataGridColumn TItem="RoadModel" Property="ServiceOrganization" Title="Service organization" />
            <RadzenDataGridColumn TItem="RoadModel" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                <Template Context="road">
                    <RadzenButton Size="ButtonSize.Small" Icon="edit" Click="@(args => onEditClick(road))" @onclick:stopPropagation="true" />
                    <RadzenButton Size="ButtonSize.Small" Icon="close" Click="@(args => onDeleteClick(road))" ButtonStyle="ButtonStyle.Danger" @onclick:stopPropagation="true" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    RadzenDataGrid<RoadModel> roadGrid;

    IList<RoadModel> roads;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            roads = await roadService.GetAsync();

        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
    }

    void onEditClick(RoadModel model)
    {
        NavigationManager.NavigateTo($"/roads/{model.Id}");
    }

    async Task onDeleteClick(RoadModel model)
    {
        try
        {
            var result = await DialogService.Confirm($"Delete {model.Number}?", "Delete", new ConfirmOptions()
            {
                OkButtonText = "Yes",
                CancelButtonText = "No"
            });

            if (result.HasValue && result.Value)
            {
                await roadService.DeleteAsync(model.Id);
                roads = await roadService.GetAsync();
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
    }

    void onCreateClick()
    {
        NavigationManager.NavigateTo("/roads/create");
    }
}