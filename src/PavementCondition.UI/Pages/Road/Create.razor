@page "/roads/create"
@inject IRoadService roadService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

<h1>Create road</h1>

<div class="row">
    <div class="card col-6">
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Number</label>
                    <InputText @bind-Value="model.Number" class="form-control" />
                    <ValidationMessage For="@(() => model.Number)" />
                </div>
                <div class="form-group">
                    <label>Start point</label>
                    <InputText @bind-Value="model.StartPoint" class="form-control" />
                    <ValidationMessage For="@(() => model.StartPoint)" />
                </div>
                <div class="form-group">
                    <label>End point</label>
                    <InputText @bind-Value="model.EndPoint" class="form-control" />
                    <ValidationMessage For="@(() => model.EndPoint)" />
                </div>
                <div class="form-group">
                    <label>Distance</label>
                    <InputNumber @bind-Value="model.Distance" class="form-control" />
                    <ValidationMessage For="@(() => model.Distance)" />
                </div>
                <div class="form-group">
                    <label>Service organization</label>
                    <InputText @bind-Value="model.ServiceOrganization" class="form-control" />
                    <ValidationMessage For="@(() => model.ServiceOrganization)" />
                </div>
                <div class="row">
                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(onCancleClick) Text="Cancel" ButtonStyle="ButtonStyle.Light" Disabled="loading"/>
                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(OnValidSubmit) Text="Save" ButtonStyle="ButtonStyle.Secondary" IsBusy="loading"/>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private RoadModel model = new RoadModel();
    private bool loading = false;

    private async void OnValidSubmit()
    {
        AlertService.Clear();

        loading = true;
        try
        {
            await roadService.CreateAsync(model);
            NavigationManager.NavigateTo("/roads");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }

    void onCancleClick()
    {
        NavigationManager.NavigateTo("/roads");
    }
}
