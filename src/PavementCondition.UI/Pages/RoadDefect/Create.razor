@page "/roads/inspections/{id:int}/defects/create"
@inject IDefectTypeService defectTypeService
@inject IRoadDefectService roadDefectService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager


<h1>Create road defect</h1>

<div class="row">
    <div class="card col-6">
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Defect type</label>
                    <InputSelect @bind-Value="model.DefectTypeId" class="form-control">
                        @foreach (var defectType in defectTypes)
                        {
                            <option value="@defectType.Id">@defectType.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => model.DefectTypeId)" />
                </div>
                <div class="form-group">
                    <label>Defect start point</label>
                    <InputNumber @bind-Value="model.DefectStartPoint" class="form-control" />
                    <ValidationMessage For="@(() => model.DefectStartPoint)" />
                </div>
                <div class="form-group">
                    <label>Defect distance</label>
                    <InputNumber @bind-Value="model.DefectDistance" class="form-control" />
                    <ValidationMessage For="@(() => model.DefectDistance)" />
                </div>
                <div class="row">
                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(onCancleClick) Text="Cancel" ButtonStyle="ButtonStyle.Light" Disabled="loading" />
                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(OnValidSubmit) Text="Save" ButtonStyle="ButtonStyle.Secondary" IsBusy="loading" />
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private RoadDefectModel model = new RoadDefectModel();
    private List<DefectTypeModel> defectTypes = new List<DefectTypeModel>();
    private bool loading = false;


    protected override async Task OnInitializedAsync()
    {
        loading = true;
        try
        {
            defectTypes = await defectTypeService.GetAsync();
            loading = false;
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }


    }

    private async void OnValidSubmit()
    {
        AlertService.Clear();

        loading = true;
        try
        {
            model.RoadInspectionId = Id;
            await roadDefectService.CreateAsync(model);
            NavigationManager.NavigateTo($"/roads/inspections/{Id}/defects");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }

    void onCancleClick()
    {
        NavigationManager.NavigateTo($"/roads/inspections/{Id}/defects");
    }

    [Parameter]
    public int Id { get; set; }
}
